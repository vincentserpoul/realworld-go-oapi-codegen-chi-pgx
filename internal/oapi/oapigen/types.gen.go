// Package oapigen provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package oapigen

import (
	"time"
)

const (
	TokenScopes = "Token.Scopes"
)

// Article defines model for Article.
type Article struct {
	Author         Profile   `json:"author"`
	Body           string    `json:"body"`
	CreatedAt      time.Time `json:"createdAt"`
	Description    string    `json:"description"`
	Favorited      bool      `json:"favorited"`
	FavoritesCount int       `json:"favoritesCount"`
	Slug           string    `json:"slug"`
	TagList        []string  `json:"tagList"`
	Title          string    `json:"title"`
	UpdatedAt      time.Time `json:"updatedAt"`
}

// Comment defines model for Comment.
type Comment struct {
	Author    Profile   `json:"author"`
	Body      string    `json:"body"`
	CreatedAt time.Time `json:"createdAt"`
	Id        int       `json:"id"`
	UpdatedAt time.Time `json:"updatedAt"`
}

// GenericErrorModel defines model for GenericErrorModel.
type GenericErrorModel struct {
	Errors struct {
		Body []string `json:"body"`
	} `json:"errors"`
}

// LoginUser defines model for LoginUser.
type LoginUser struct {
	Email    string `json:"email"`
	Password string `json:"password"`
}

// NewArticle defines model for NewArticle.
type NewArticle struct {
	Body        string    `json:"body"`
	Description string    `json:"description"`
	TagList     *[]string `json:"tagList,omitempty"`
	Title       string    `json:"title"`
}

// NewComment defines model for NewComment.
type NewComment struct {
	Body string `json:"body"`
}

// NewUser defines model for NewUser.
type NewUser struct {
	Email    string `json:"email"`
	Password string `json:"password"`
	Username string `json:"username"`
}

// Profile defines model for Profile.
type Profile struct {
	Bio       string `json:"bio"`
	Following bool   `json:"following"`
	Image     string `json:"image"`
	Username  string `json:"username"`
}

// UpdateArticle defines model for UpdateArticle.
type UpdateArticle struct {
	Body        *string `json:"body,omitempty"`
	Description *string `json:"description,omitempty"`
	Title       *string `json:"title,omitempty"`
}

// UpdateUser defines model for UpdateUser.
type UpdateUser struct {
	Bio      *string `json:"bio,omitempty"`
	Email    *string `json:"email,omitempty"`
	Image    *string `json:"image,omitempty"`
	Password *string `json:"password,omitempty"`
	Username *string `json:"username,omitempty"`
}

// User defines model for User.
type User struct {
	Bio      string `json:"bio"`
	Email    string `json:"email"`
	Image    string `json:"image"`
	Token    string `json:"token"`
	Username string `json:"username"`
}

// LimitParam defines model for limitParam.
type LimitParam = int

// OffsetParam defines model for offsetParam.
type OffsetParam = int

// GenericError defines model for GenericError.
type GenericError = GenericErrorModel

// MultipleArticlesResponse defines model for MultipleArticlesResponse.
type MultipleArticlesResponse struct {
	Articles      []Article `json:"articles"`
	ArticlesCount int       `json:"articlesCount"`
}

// MultipleCommentsResponse defines model for MultipleCommentsResponse.
type MultipleCommentsResponse struct {
	Comments []Comment `json:"comments"`
}

// ProfileResponse defines model for ProfileResponse.
type ProfileResponse struct {
	Profile Profile `json:"profile"`
}

// SingleArticleResponse defines model for SingleArticleResponse.
type SingleArticleResponse struct {
	Article Article `json:"article"`
}

// SingleCommentResponse defines model for SingleCommentResponse.
type SingleCommentResponse struct {
	Comment Comment `json:"comment"`
}

// TagsResponse defines model for TagsResponse.
type TagsResponse struct {
	Tags []string `json:"tags"`
}

// UserResponse defines model for UserResponse.
type UserResponse struct {
	User User `json:"user"`
}

// LoginUserRequest defines model for LoginUserRequest.
type LoginUserRequest struct {
	User LoginUser `json:"user"`
}

// NewArticleRequest defines model for NewArticleRequest.
type NewArticleRequest struct {
	Article NewArticle `json:"article"`
}

// NewCommentRequest defines model for NewCommentRequest.
type NewCommentRequest struct {
	Comment NewComment `json:"comment"`
}

// NewUserRequest defines model for NewUserRequest.
type NewUserRequest struct {
	User NewUser `json:"user"`
}

// UpdateArticleRequest defines model for UpdateArticleRequest.
type UpdateArticleRequest struct {
	Article UpdateArticle `json:"article"`
}

// UpdateUserRequest defines model for UpdateUserRequest.
type UpdateUserRequest struct {
	User UpdateUser `json:"user"`
}

// GetArticlesParams defines parameters for GetArticles.
type GetArticlesParams struct {
	// Tag Filter by tag
	Tag *string `form:"tag,omitempty" json:"tag,omitempty"`

	// Author Filter by author (username)
	Author *string `form:"author,omitempty" json:"author,omitempty"`

	// Favorited Filter by favorites of a user (username)
	Favorited *string `form:"favorited,omitempty" json:"favorited,omitempty"`

	// Offset The number of items to skip before starting to collect the result set.
	Offset *OffsetParam `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit The numbers of items to return.
	Limit *LimitParam `form:"limit,omitempty" json:"limit,omitempty"`
}

// CreateArticleJSONBody defines parameters for CreateArticle.
type CreateArticleJSONBody struct {
	Article NewArticle `json:"article"`
}

// GetArticlesFeedParams defines parameters for GetArticlesFeed.
type GetArticlesFeedParams struct {
	// Offset The number of items to skip before starting to collect the result set.
	Offset *OffsetParam `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit The numbers of items to return.
	Limit *LimitParam `form:"limit,omitempty" json:"limit,omitempty"`
}

// UpdateArticleJSONBody defines parameters for UpdateArticle.
type UpdateArticleJSONBody struct {
	Article UpdateArticle `json:"article"`
}

// CreateArticleCommentJSONBody defines parameters for CreateArticleComment.
type CreateArticleCommentJSONBody struct {
	Comment NewComment `json:"comment"`
}

// UpdateCurrentUserJSONBody defines parameters for UpdateCurrentUser.
type UpdateCurrentUserJSONBody struct {
	User UpdateUser `json:"user"`
}

// CreateUserJSONBody defines parameters for CreateUser.
type CreateUserJSONBody struct {
	User NewUser `json:"user"`
}

// LoginJSONBody defines parameters for Login.
type LoginJSONBody struct {
	User LoginUser `json:"user"`
}

// CreateArticleJSONRequestBody defines body for CreateArticle for application/json ContentType.
type CreateArticleJSONRequestBody CreateArticleJSONBody

// UpdateArticleJSONRequestBody defines body for UpdateArticle for application/json ContentType.
type UpdateArticleJSONRequestBody UpdateArticleJSONBody

// CreateArticleCommentJSONRequestBody defines body for CreateArticleComment for application/json ContentType.
type CreateArticleCommentJSONRequestBody CreateArticleCommentJSONBody

// UpdateCurrentUserJSONRequestBody defines body for UpdateCurrentUser for application/json ContentType.
type UpdateCurrentUserJSONRequestBody UpdateCurrentUserJSONBody

// CreateUserJSONRequestBody defines body for CreateUser for application/json ContentType.
type CreateUserJSONRequestBody CreateUserJSONBody

// LoginJSONRequestBody defines body for Login for application/json ContentType.
type LoginJSONRequestBody LoginJSONBody

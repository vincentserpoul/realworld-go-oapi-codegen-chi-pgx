// Package oapigen provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.0.0 DO NOT EDIT.
package oapigen

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
	"github.com/oapi-codegen/runtime"
	strictnethttp "github.com/oapi-codegen/runtime/strictmiddleware/nethttp"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get recent articles globally
	// (GET /articles)
	GetArticles(w http.ResponseWriter, r *http.Request, params GetArticlesParams)
	// Create an article
	// (POST /articles)
	CreateArticle(w http.ResponseWriter, r *http.Request)
	// Get recent articles from users you follow
	// (GET /articles/feed)
	GetArticlesFeed(w http.ResponseWriter, r *http.Request, params GetArticlesFeedParams)
	// Delete an article
	// (DELETE /articles/{slug})
	DeleteArticle(w http.ResponseWriter, r *http.Request, slug string)
	// Get an article
	// (GET /articles/{slug})
	GetArticle(w http.ResponseWriter, r *http.Request, slug string)
	// Update an article
	// (PUT /articles/{slug})
	UpdateArticle(w http.ResponseWriter, r *http.Request, slug string)
	// Get comments for an article
	// (GET /articles/{slug}/comments)
	GetArticleComments(w http.ResponseWriter, r *http.Request, slug string)
	// Create a comment for an article
	// (POST /articles/{slug}/comments)
	CreateArticleComment(w http.ResponseWriter, r *http.Request, slug string)
	// Delete a comment for an article
	// (DELETE /articles/{slug}/comments/{id})
	DeleteArticleComment(w http.ResponseWriter, r *http.Request, slug string, id int)
	// Unfavorite an article
	// (DELETE /articles/{slug}/favorite)
	DeleteArticleFavorite(w http.ResponseWriter, r *http.Request, slug string)
	// Favorite an article
	// (POST /articles/{slug}/favorite)
	CreateArticleFavorite(w http.ResponseWriter, r *http.Request, slug string)
	// Get a profile
	// (GET /profiles/{username})
	GetProfileByUsername(w http.ResponseWriter, r *http.Request, username string)
	// Unfollow a user
	// (DELETE /profiles/{username}/follow)
	UnfollowUserByUsername(w http.ResponseWriter, r *http.Request, username string)
	// Follow a user
	// (POST /profiles/{username}/follow)
	FollowUserByUsername(w http.ResponseWriter, r *http.Request, username string)
	// Get tags
	// (GET /tags)
	GetTags(w http.ResponseWriter, r *http.Request)
	// Get current user
	// (GET /user)
	GetCurrentUser(w http.ResponseWriter, r *http.Request)
	// Update current user
	// (PUT /user)
	UpdateCurrentUser(w http.ResponseWriter, r *http.Request)

	// (POST /users)
	CreateUser(w http.ResponseWriter, r *http.Request)
	// Existing user login
	// (POST /users/login)
	Login(w http.ResponseWriter, r *http.Request)
}

// Unimplemented server implementation that returns http.StatusNotImplemented for each endpoint.

type Unimplemented struct{}

// Get recent articles globally
// (GET /articles)
func (_ Unimplemented) GetArticles(w http.ResponseWriter, r *http.Request, params GetArticlesParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Create an article
// (POST /articles)
func (_ Unimplemented) CreateArticle(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get recent articles from users you follow
// (GET /articles/feed)
func (_ Unimplemented) GetArticlesFeed(w http.ResponseWriter, r *http.Request, params GetArticlesFeedParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Delete an article
// (DELETE /articles/{slug})
func (_ Unimplemented) DeleteArticle(w http.ResponseWriter, r *http.Request, slug string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get an article
// (GET /articles/{slug})
func (_ Unimplemented) GetArticle(w http.ResponseWriter, r *http.Request, slug string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Update an article
// (PUT /articles/{slug})
func (_ Unimplemented) UpdateArticle(w http.ResponseWriter, r *http.Request, slug string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get comments for an article
// (GET /articles/{slug}/comments)
func (_ Unimplemented) GetArticleComments(w http.ResponseWriter, r *http.Request, slug string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Create a comment for an article
// (POST /articles/{slug}/comments)
func (_ Unimplemented) CreateArticleComment(w http.ResponseWriter, r *http.Request, slug string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Delete a comment for an article
// (DELETE /articles/{slug}/comments/{id})
func (_ Unimplemented) DeleteArticleComment(w http.ResponseWriter, r *http.Request, slug string, id int) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Unfavorite an article
// (DELETE /articles/{slug}/favorite)
func (_ Unimplemented) DeleteArticleFavorite(w http.ResponseWriter, r *http.Request, slug string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Favorite an article
// (POST /articles/{slug}/favorite)
func (_ Unimplemented) CreateArticleFavorite(w http.ResponseWriter, r *http.Request, slug string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get a profile
// (GET /profiles/{username})
func (_ Unimplemented) GetProfileByUsername(w http.ResponseWriter, r *http.Request, username string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Unfollow a user
// (DELETE /profiles/{username}/follow)
func (_ Unimplemented) UnfollowUserByUsername(w http.ResponseWriter, r *http.Request, username string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Follow a user
// (POST /profiles/{username}/follow)
func (_ Unimplemented) FollowUserByUsername(w http.ResponseWriter, r *http.Request, username string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get tags
// (GET /tags)
func (_ Unimplemented) GetTags(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get current user
// (GET /user)
func (_ Unimplemented) GetCurrentUser(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Update current user
// (PUT /user)
func (_ Unimplemented) UpdateCurrentUser(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (POST /users)
func (_ Unimplemented) CreateUser(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Existing user login
// (POST /users/login)
func (_ Unimplemented) Login(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// GetArticles operation middleware
func (siw *ServerInterfaceWrapper) GetArticles(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetArticlesParams

	// ------------- Optional query parameter "tag" -------------

	err = runtime.BindQueryParameter("form", true, false, "tag", r.URL.Query(), &params.Tag)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "tag", Err: err})
		return
	}

	// ------------- Optional query parameter "author" -------------

	err = runtime.BindQueryParameter("form", true, false, "author", r.URL.Query(), &params.Author)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "author", Err: err})
		return
	}

	// ------------- Optional query parameter "favorited" -------------

	err = runtime.BindQueryParameter("form", true, false, "favorited", r.URL.Query(), &params.Favorited)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "favorited", Err: err})
		return
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", r.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "offset", Err: err})
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetArticles(w, r, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateArticle operation middleware
func (siw *ServerInterfaceWrapper) CreateArticle(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, TokenScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateArticle(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetArticlesFeed operation middleware
func (siw *ServerInterfaceWrapper) GetArticlesFeed(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	ctx = context.WithValue(ctx, TokenScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetArticlesFeedParams

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", r.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "offset", Err: err})
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetArticlesFeed(w, r, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteArticle operation middleware
func (siw *ServerInterfaceWrapper) DeleteArticle(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "slug" -------------
	var slug string

	err = runtime.BindStyledParameterWithLocation("simple", false, "slug", runtime.ParamLocationPath, chi.URLParam(r, "slug"), &slug)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "slug", Err: err})
		return
	}

	ctx = context.WithValue(ctx, TokenScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteArticle(w, r, slug)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetArticle operation middleware
func (siw *ServerInterfaceWrapper) GetArticle(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "slug" -------------
	var slug string

	err = runtime.BindStyledParameterWithLocation("simple", false, "slug", runtime.ParamLocationPath, chi.URLParam(r, "slug"), &slug)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "slug", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetArticle(w, r, slug)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// UpdateArticle operation middleware
func (siw *ServerInterfaceWrapper) UpdateArticle(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "slug" -------------
	var slug string

	err = runtime.BindStyledParameterWithLocation("simple", false, "slug", runtime.ParamLocationPath, chi.URLParam(r, "slug"), &slug)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "slug", Err: err})
		return
	}

	ctx = context.WithValue(ctx, TokenScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateArticle(w, r, slug)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetArticleComments operation middleware
func (siw *ServerInterfaceWrapper) GetArticleComments(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "slug" -------------
	var slug string

	err = runtime.BindStyledParameterWithLocation("simple", false, "slug", runtime.ParamLocationPath, chi.URLParam(r, "slug"), &slug)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "slug", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetArticleComments(w, r, slug)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateArticleComment operation middleware
func (siw *ServerInterfaceWrapper) CreateArticleComment(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "slug" -------------
	var slug string

	err = runtime.BindStyledParameterWithLocation("simple", false, "slug", runtime.ParamLocationPath, chi.URLParam(r, "slug"), &slug)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "slug", Err: err})
		return
	}

	ctx = context.WithValue(ctx, TokenScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateArticleComment(w, r, slug)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteArticleComment operation middleware
func (siw *ServerInterfaceWrapper) DeleteArticleComment(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "slug" -------------
	var slug string

	err = runtime.BindStyledParameterWithLocation("simple", false, "slug", runtime.ParamLocationPath, chi.URLParam(r, "slug"), &slug)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "slug", Err: err})
		return
	}

	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, TokenScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteArticleComment(w, r, slug, id)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteArticleFavorite operation middleware
func (siw *ServerInterfaceWrapper) DeleteArticleFavorite(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "slug" -------------
	var slug string

	err = runtime.BindStyledParameterWithLocation("simple", false, "slug", runtime.ParamLocationPath, chi.URLParam(r, "slug"), &slug)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "slug", Err: err})
		return
	}

	ctx = context.WithValue(ctx, TokenScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteArticleFavorite(w, r, slug)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateArticleFavorite operation middleware
func (siw *ServerInterfaceWrapper) CreateArticleFavorite(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "slug" -------------
	var slug string

	err = runtime.BindStyledParameterWithLocation("simple", false, "slug", runtime.ParamLocationPath, chi.URLParam(r, "slug"), &slug)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "slug", Err: err})
		return
	}

	ctx = context.WithValue(ctx, TokenScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateArticleFavorite(w, r, slug)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetProfileByUsername operation middleware
func (siw *ServerInterfaceWrapper) GetProfileByUsername(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "username" -------------
	var username string

	err = runtime.BindStyledParameterWithLocation("simple", false, "username", runtime.ParamLocationPath, chi.URLParam(r, "username"), &username)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "username", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetProfileByUsername(w, r, username)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// UnfollowUserByUsername operation middleware
func (siw *ServerInterfaceWrapper) UnfollowUserByUsername(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "username" -------------
	var username string

	err = runtime.BindStyledParameterWithLocation("simple", false, "username", runtime.ParamLocationPath, chi.URLParam(r, "username"), &username)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "username", Err: err})
		return
	}

	ctx = context.WithValue(ctx, TokenScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UnfollowUserByUsername(w, r, username)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// FollowUserByUsername operation middleware
func (siw *ServerInterfaceWrapper) FollowUserByUsername(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "username" -------------
	var username string

	err = runtime.BindStyledParameterWithLocation("simple", false, "username", runtime.ParamLocationPath, chi.URLParam(r, "username"), &username)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "username", Err: err})
		return
	}

	ctx = context.WithValue(ctx, TokenScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.FollowUserByUsername(w, r, username)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetTags operation middleware
func (siw *ServerInterfaceWrapper) GetTags(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetTags(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetCurrentUser operation middleware
func (siw *ServerInterfaceWrapper) GetCurrentUser(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, TokenScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetCurrentUser(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// UpdateCurrentUser operation middleware
func (siw *ServerInterfaceWrapper) UpdateCurrentUser(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, TokenScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateCurrentUser(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateUser operation middleware
func (siw *ServerInterfaceWrapper) CreateUser(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateUser(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// Login operation middleware
func (siw *ServerInterfaceWrapper) Login(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.Login(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/articles", wrapper.GetArticles)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/articles", wrapper.CreateArticle)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/articles/feed", wrapper.GetArticlesFeed)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/articles/{slug}", wrapper.DeleteArticle)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/articles/{slug}", wrapper.GetArticle)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/articles/{slug}", wrapper.UpdateArticle)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/articles/{slug}/comments", wrapper.GetArticleComments)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/articles/{slug}/comments", wrapper.CreateArticleComment)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/articles/{slug}/comments/{id}", wrapper.DeleteArticleComment)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/articles/{slug}/favorite", wrapper.DeleteArticleFavorite)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/articles/{slug}/favorite", wrapper.CreateArticleFavorite)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/profiles/{username}", wrapper.GetProfileByUsername)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/profiles/{username}/follow", wrapper.UnfollowUserByUsername)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/profiles/{username}/follow", wrapper.FollowUserByUsername)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/tags", wrapper.GetTags)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/user", wrapper.GetCurrentUser)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/user", wrapper.UpdateCurrentUser)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/users", wrapper.CreateUser)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/users/login", wrapper.Login)
	})

	return r
}

type EmptyOkResponseResponse struct {
}

type GenericErrorJSONResponse GenericErrorModel

type MultipleArticlesResponseJSONResponse struct {
	Articles      []Article `json:"articles"`
	ArticlesCount int       `json:"articlesCount"`
}

type MultipleCommentsResponseJSONResponse struct {
	Comments []Comment `json:"comments"`
}

type ProfileResponseJSONResponse struct {
	Profile Profile `json:"profile"`
}

type SingleArticleResponseJSONResponse struct {
	Article Article `json:"article"`
}

type SingleCommentResponseJSONResponse struct {
	Comment Comment `json:"comment"`
}

type TagsResponseJSONResponse struct {
	Tags []string `json:"tags"`
}

type UnauthorizedResponse struct {
}

type UserResponseJSONResponse struct {
	User User `json:"user"`
}

type GetArticlesRequestObject struct {
	Params GetArticlesParams
}

type GetArticlesResponseObject interface {
	VisitGetArticlesResponse(w http.ResponseWriter) error
}

type GetArticles200JSONResponse struct {
	MultipleArticlesResponseJSONResponse
}

func (response GetArticles200JSONResponse) VisitGetArticlesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetArticles401Response = UnauthorizedResponse

func (response GetArticles401Response) VisitGetArticlesResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type GetArticles422JSONResponse struct{ GenericErrorJSONResponse }

func (response GetArticles422JSONResponse) VisitGetArticlesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type CreateArticleRequestObject struct {
	Body *CreateArticleJSONRequestBody
}

type CreateArticleResponseObject interface {
	VisitCreateArticleResponse(w http.ResponseWriter) error
}

type CreateArticle201JSONResponse struct {
	SingleArticleResponseJSONResponse
}

func (response CreateArticle201JSONResponse) VisitCreateArticleResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type CreateArticle401Response = UnauthorizedResponse

func (response CreateArticle401Response) VisitCreateArticleResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type CreateArticle422JSONResponse struct{ GenericErrorJSONResponse }

func (response CreateArticle422JSONResponse) VisitCreateArticleResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type GetArticlesFeedRequestObject struct {
	Params GetArticlesFeedParams
}

type GetArticlesFeedResponseObject interface {
	VisitGetArticlesFeedResponse(w http.ResponseWriter) error
}

type GetArticlesFeed200JSONResponse struct {
	MultipleArticlesResponseJSONResponse
}

func (response GetArticlesFeed200JSONResponse) VisitGetArticlesFeedResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetArticlesFeed401Response = UnauthorizedResponse

func (response GetArticlesFeed401Response) VisitGetArticlesFeedResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type GetArticlesFeed422JSONResponse struct{ GenericErrorJSONResponse }

func (response GetArticlesFeed422JSONResponse) VisitGetArticlesFeedResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type DeleteArticleRequestObject struct {
	Slug string `json:"slug"`
}

type DeleteArticleResponseObject interface {
	VisitDeleteArticleResponse(w http.ResponseWriter) error
}

type DeleteArticle200Response = EmptyOkResponseResponse

func (response DeleteArticle200Response) VisitDeleteArticleResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type DeleteArticle401Response = UnauthorizedResponse

func (response DeleteArticle401Response) VisitDeleteArticleResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type DeleteArticle422JSONResponse struct{ GenericErrorJSONResponse }

func (response DeleteArticle422JSONResponse) VisitDeleteArticleResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type GetArticleRequestObject struct {
	Slug string `json:"slug"`
}

type GetArticleResponseObject interface {
	VisitGetArticleResponse(w http.ResponseWriter) error
}

type GetArticle200JSONResponse struct {
	SingleArticleResponseJSONResponse
}

func (response GetArticle200JSONResponse) VisitGetArticleResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetArticle422JSONResponse struct{ GenericErrorJSONResponse }

func (response GetArticle422JSONResponse) VisitGetArticleResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type UpdateArticleRequestObject struct {
	Slug string `json:"slug"`
	Body *UpdateArticleJSONRequestBody
}

type UpdateArticleResponseObject interface {
	VisitUpdateArticleResponse(w http.ResponseWriter) error
}

type UpdateArticle200JSONResponse struct {
	SingleArticleResponseJSONResponse
}

func (response UpdateArticle200JSONResponse) VisitUpdateArticleResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UpdateArticle401Response = UnauthorizedResponse

func (response UpdateArticle401Response) VisitUpdateArticleResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type UpdateArticle422JSONResponse struct{ GenericErrorJSONResponse }

func (response UpdateArticle422JSONResponse) VisitUpdateArticleResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type GetArticleCommentsRequestObject struct {
	Slug string `json:"slug"`
}

type GetArticleCommentsResponseObject interface {
	VisitGetArticleCommentsResponse(w http.ResponseWriter) error
}

type GetArticleComments200JSONResponse struct {
	MultipleCommentsResponseJSONResponse
}

func (response GetArticleComments200JSONResponse) VisitGetArticleCommentsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetArticleComments401Response = UnauthorizedResponse

func (response GetArticleComments401Response) VisitGetArticleCommentsResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type GetArticleComments422JSONResponse struct{ GenericErrorJSONResponse }

func (response GetArticleComments422JSONResponse) VisitGetArticleCommentsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type CreateArticleCommentRequestObject struct {
	Slug string `json:"slug"`
	Body *CreateArticleCommentJSONRequestBody
}

type CreateArticleCommentResponseObject interface {
	VisitCreateArticleCommentResponse(w http.ResponseWriter) error
}

type CreateArticleComment200JSONResponse struct {
	SingleCommentResponseJSONResponse
}

func (response CreateArticleComment200JSONResponse) VisitCreateArticleCommentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type CreateArticleComment401Response = UnauthorizedResponse

func (response CreateArticleComment401Response) VisitCreateArticleCommentResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type CreateArticleComment422JSONResponse struct{ GenericErrorJSONResponse }

func (response CreateArticleComment422JSONResponse) VisitCreateArticleCommentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type DeleteArticleCommentRequestObject struct {
	Slug string `json:"slug"`
	Id   int    `json:"id"`
}

type DeleteArticleCommentResponseObject interface {
	VisitDeleteArticleCommentResponse(w http.ResponseWriter) error
}

type DeleteArticleComment200Response = EmptyOkResponseResponse

func (response DeleteArticleComment200Response) VisitDeleteArticleCommentResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type DeleteArticleComment401Response = UnauthorizedResponse

func (response DeleteArticleComment401Response) VisitDeleteArticleCommentResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type DeleteArticleComment422JSONResponse struct{ GenericErrorJSONResponse }

func (response DeleteArticleComment422JSONResponse) VisitDeleteArticleCommentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type DeleteArticleFavoriteRequestObject struct {
	Slug string `json:"slug"`
}

type DeleteArticleFavoriteResponseObject interface {
	VisitDeleteArticleFavoriteResponse(w http.ResponseWriter) error
}

type DeleteArticleFavorite200JSONResponse struct {
	SingleArticleResponseJSONResponse
}

func (response DeleteArticleFavorite200JSONResponse) VisitDeleteArticleFavoriteResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type DeleteArticleFavorite401Response = UnauthorizedResponse

func (response DeleteArticleFavorite401Response) VisitDeleteArticleFavoriteResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type DeleteArticleFavorite422JSONResponse struct{ GenericErrorJSONResponse }

func (response DeleteArticleFavorite422JSONResponse) VisitDeleteArticleFavoriteResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type CreateArticleFavoriteRequestObject struct {
	Slug string `json:"slug"`
}

type CreateArticleFavoriteResponseObject interface {
	VisitCreateArticleFavoriteResponse(w http.ResponseWriter) error
}

type CreateArticleFavorite200JSONResponse struct {
	SingleArticleResponseJSONResponse
}

func (response CreateArticleFavorite200JSONResponse) VisitCreateArticleFavoriteResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type CreateArticleFavorite401Response = UnauthorizedResponse

func (response CreateArticleFavorite401Response) VisitCreateArticleFavoriteResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type CreateArticleFavorite422JSONResponse struct{ GenericErrorJSONResponse }

func (response CreateArticleFavorite422JSONResponse) VisitCreateArticleFavoriteResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type GetProfileByUsernameRequestObject struct {
	Username string `json:"username"`
}

type GetProfileByUsernameResponseObject interface {
	VisitGetProfileByUsernameResponse(w http.ResponseWriter) error
}

type GetProfileByUsername200JSONResponse struct{ ProfileResponseJSONResponse }

func (response GetProfileByUsername200JSONResponse) VisitGetProfileByUsernameResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetProfileByUsername401Response = UnauthorizedResponse

func (response GetProfileByUsername401Response) VisitGetProfileByUsernameResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type GetProfileByUsername422JSONResponse struct{ GenericErrorJSONResponse }

func (response GetProfileByUsername422JSONResponse) VisitGetProfileByUsernameResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type UnfollowUserByUsernameRequestObject struct {
	Username string `json:"username"`
}

type UnfollowUserByUsernameResponseObject interface {
	VisitUnfollowUserByUsernameResponse(w http.ResponseWriter) error
}

type UnfollowUserByUsername200JSONResponse struct{ ProfileResponseJSONResponse }

func (response UnfollowUserByUsername200JSONResponse) VisitUnfollowUserByUsernameResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UnfollowUserByUsername401Response = UnauthorizedResponse

func (response UnfollowUserByUsername401Response) VisitUnfollowUserByUsernameResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type UnfollowUserByUsername422JSONResponse struct{ GenericErrorJSONResponse }

func (response UnfollowUserByUsername422JSONResponse) VisitUnfollowUserByUsernameResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type FollowUserByUsernameRequestObject struct {
	Username string `json:"username"`
}

type FollowUserByUsernameResponseObject interface {
	VisitFollowUserByUsernameResponse(w http.ResponseWriter) error
}

type FollowUserByUsername200JSONResponse struct{ ProfileResponseJSONResponse }

func (response FollowUserByUsername200JSONResponse) VisitFollowUserByUsernameResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type FollowUserByUsername401Response = UnauthorizedResponse

func (response FollowUserByUsername401Response) VisitFollowUserByUsernameResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type FollowUserByUsername422JSONResponse struct{ GenericErrorJSONResponse }

func (response FollowUserByUsername422JSONResponse) VisitFollowUserByUsernameResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type GetTagsRequestObject struct {
}

type GetTagsResponseObject interface {
	VisitGetTagsResponse(w http.ResponseWriter) error
}

type GetTags200JSONResponse struct{ TagsResponseJSONResponse }

func (response GetTags200JSONResponse) VisitGetTagsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetTags422JSONResponse struct{ GenericErrorJSONResponse }

func (response GetTags422JSONResponse) VisitGetTagsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type GetCurrentUserRequestObject struct {
}

type GetCurrentUserResponseObject interface {
	VisitGetCurrentUserResponse(w http.ResponseWriter) error
}

type GetCurrentUser200JSONResponse struct{ UserResponseJSONResponse }

func (response GetCurrentUser200JSONResponse) VisitGetCurrentUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetCurrentUser401Response = UnauthorizedResponse

func (response GetCurrentUser401Response) VisitGetCurrentUserResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type GetCurrentUser422JSONResponse struct{ GenericErrorJSONResponse }

func (response GetCurrentUser422JSONResponse) VisitGetCurrentUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type UpdateCurrentUserRequestObject struct {
	Body *UpdateCurrentUserJSONRequestBody
}

type UpdateCurrentUserResponseObject interface {
	VisitUpdateCurrentUserResponse(w http.ResponseWriter) error
}

type UpdateCurrentUser200JSONResponse struct{ UserResponseJSONResponse }

func (response UpdateCurrentUser200JSONResponse) VisitUpdateCurrentUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UpdateCurrentUser401Response = UnauthorizedResponse

func (response UpdateCurrentUser401Response) VisitUpdateCurrentUserResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type UpdateCurrentUser422JSONResponse struct{ GenericErrorJSONResponse }

func (response UpdateCurrentUser422JSONResponse) VisitUpdateCurrentUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type CreateUserRequestObject struct {
	Body *CreateUserJSONRequestBody
}

type CreateUserResponseObject interface {
	VisitCreateUserResponse(w http.ResponseWriter) error
}

type CreateUser201JSONResponse struct{ UserResponseJSONResponse }

func (response CreateUser201JSONResponse) VisitCreateUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type CreateUser422JSONResponse struct{ GenericErrorJSONResponse }

func (response CreateUser422JSONResponse) VisitCreateUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type LoginRequestObject struct {
	Body *LoginJSONRequestBody
}

type LoginResponseObject interface {
	VisitLoginResponse(w http.ResponseWriter) error
}

type Login200JSONResponse struct{ UserResponseJSONResponse }

func (response Login200JSONResponse) VisitLoginResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type Login401Response = UnauthorizedResponse

func (response Login401Response) VisitLoginResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type Login422JSONResponse struct{ GenericErrorJSONResponse }

func (response Login422JSONResponse) VisitLoginResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Get recent articles globally
	// (GET /articles)
	GetArticles(ctx context.Context, request GetArticlesRequestObject) (GetArticlesResponseObject, error)
	// Create an article
	// (POST /articles)
	CreateArticle(ctx context.Context, request CreateArticleRequestObject) (CreateArticleResponseObject, error)
	// Get recent articles from users you follow
	// (GET /articles/feed)
	GetArticlesFeed(ctx context.Context, request GetArticlesFeedRequestObject) (GetArticlesFeedResponseObject, error)
	// Delete an article
	// (DELETE /articles/{slug})
	DeleteArticle(ctx context.Context, request DeleteArticleRequestObject) (DeleteArticleResponseObject, error)
	// Get an article
	// (GET /articles/{slug})
	GetArticle(ctx context.Context, request GetArticleRequestObject) (GetArticleResponseObject, error)
	// Update an article
	// (PUT /articles/{slug})
	UpdateArticle(ctx context.Context, request UpdateArticleRequestObject) (UpdateArticleResponseObject, error)
	// Get comments for an article
	// (GET /articles/{slug}/comments)
	GetArticleComments(ctx context.Context, request GetArticleCommentsRequestObject) (GetArticleCommentsResponseObject, error)
	// Create a comment for an article
	// (POST /articles/{slug}/comments)
	CreateArticleComment(ctx context.Context, request CreateArticleCommentRequestObject) (CreateArticleCommentResponseObject, error)
	// Delete a comment for an article
	// (DELETE /articles/{slug}/comments/{id})
	DeleteArticleComment(ctx context.Context, request DeleteArticleCommentRequestObject) (DeleteArticleCommentResponseObject, error)
	// Unfavorite an article
	// (DELETE /articles/{slug}/favorite)
	DeleteArticleFavorite(ctx context.Context, request DeleteArticleFavoriteRequestObject) (DeleteArticleFavoriteResponseObject, error)
	// Favorite an article
	// (POST /articles/{slug}/favorite)
	CreateArticleFavorite(ctx context.Context, request CreateArticleFavoriteRequestObject) (CreateArticleFavoriteResponseObject, error)
	// Get a profile
	// (GET /profiles/{username})
	GetProfileByUsername(ctx context.Context, request GetProfileByUsernameRequestObject) (GetProfileByUsernameResponseObject, error)
	// Unfollow a user
	// (DELETE /profiles/{username}/follow)
	UnfollowUserByUsername(ctx context.Context, request UnfollowUserByUsernameRequestObject) (UnfollowUserByUsernameResponseObject, error)
	// Follow a user
	// (POST /profiles/{username}/follow)
	FollowUserByUsername(ctx context.Context, request FollowUserByUsernameRequestObject) (FollowUserByUsernameResponseObject, error)
	// Get tags
	// (GET /tags)
	GetTags(ctx context.Context, request GetTagsRequestObject) (GetTagsResponseObject, error)
	// Get current user
	// (GET /user)
	GetCurrentUser(ctx context.Context, request GetCurrentUserRequestObject) (GetCurrentUserResponseObject, error)
	// Update current user
	// (PUT /user)
	UpdateCurrentUser(ctx context.Context, request UpdateCurrentUserRequestObject) (UpdateCurrentUserResponseObject, error)

	// (POST /users)
	CreateUser(ctx context.Context, request CreateUserRequestObject) (CreateUserResponseObject, error)
	// Existing user login
	// (POST /users/login)
	Login(ctx context.Context, request LoginRequestObject) (LoginResponseObject, error)
}

type StrictHandlerFunc = strictnethttp.StrictHttpHandlerFunc
type StrictMiddlewareFunc = strictnethttp.StrictHttpMiddlewareFunc

type StrictHTTPServerOptions struct {
	RequestErrorHandlerFunc  func(w http.ResponseWriter, r *http.Request, err error)
	ResponseErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: StrictHTTPServerOptions{
		RequestErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		},
		ResponseErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusInternalServerError)
		},
	}}
}

func NewStrictHandlerWithOptions(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc, options StrictHTTPServerOptions) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: options}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
	options     StrictHTTPServerOptions
}

// GetArticles operation middleware
func (sh *strictHandler) GetArticles(w http.ResponseWriter, r *http.Request, params GetArticlesParams) {
	var request GetArticlesRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetArticles(ctx, request.(GetArticlesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetArticles")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetArticlesResponseObject); ok {
		if err := validResponse.VisitGetArticlesResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateArticle operation middleware
func (sh *strictHandler) CreateArticle(w http.ResponseWriter, r *http.Request) {
	var request CreateArticleRequestObject

	var body CreateArticleJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.CreateArticle(ctx, request.(CreateArticleRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateArticle")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(CreateArticleResponseObject); ok {
		if err := validResponse.VisitCreateArticleResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetArticlesFeed operation middleware
func (sh *strictHandler) GetArticlesFeed(w http.ResponseWriter, r *http.Request, params GetArticlesFeedParams) {
	var request GetArticlesFeedRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetArticlesFeed(ctx, request.(GetArticlesFeedRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetArticlesFeed")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetArticlesFeedResponseObject); ok {
		if err := validResponse.VisitGetArticlesFeedResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteArticle operation middleware
func (sh *strictHandler) DeleteArticle(w http.ResponseWriter, r *http.Request, slug string) {
	var request DeleteArticleRequestObject

	request.Slug = slug

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteArticle(ctx, request.(DeleteArticleRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteArticle")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(DeleteArticleResponseObject); ok {
		if err := validResponse.VisitDeleteArticleResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetArticle operation middleware
func (sh *strictHandler) GetArticle(w http.ResponseWriter, r *http.Request, slug string) {
	var request GetArticleRequestObject

	request.Slug = slug

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetArticle(ctx, request.(GetArticleRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetArticle")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetArticleResponseObject); ok {
		if err := validResponse.VisitGetArticleResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// UpdateArticle operation middleware
func (sh *strictHandler) UpdateArticle(w http.ResponseWriter, r *http.Request, slug string) {
	var request UpdateArticleRequestObject

	request.Slug = slug

	var body UpdateArticleJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateArticle(ctx, request.(UpdateArticleRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateArticle")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(UpdateArticleResponseObject); ok {
		if err := validResponse.VisitUpdateArticleResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetArticleComments operation middleware
func (sh *strictHandler) GetArticleComments(w http.ResponseWriter, r *http.Request, slug string) {
	var request GetArticleCommentsRequestObject

	request.Slug = slug

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetArticleComments(ctx, request.(GetArticleCommentsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetArticleComments")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetArticleCommentsResponseObject); ok {
		if err := validResponse.VisitGetArticleCommentsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateArticleComment operation middleware
func (sh *strictHandler) CreateArticleComment(w http.ResponseWriter, r *http.Request, slug string) {
	var request CreateArticleCommentRequestObject

	request.Slug = slug

	var body CreateArticleCommentJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.CreateArticleComment(ctx, request.(CreateArticleCommentRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateArticleComment")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(CreateArticleCommentResponseObject); ok {
		if err := validResponse.VisitCreateArticleCommentResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteArticleComment operation middleware
func (sh *strictHandler) DeleteArticleComment(w http.ResponseWriter, r *http.Request, slug string, id int) {
	var request DeleteArticleCommentRequestObject

	request.Slug = slug
	request.Id = id

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteArticleComment(ctx, request.(DeleteArticleCommentRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteArticleComment")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(DeleteArticleCommentResponseObject); ok {
		if err := validResponse.VisitDeleteArticleCommentResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteArticleFavorite operation middleware
func (sh *strictHandler) DeleteArticleFavorite(w http.ResponseWriter, r *http.Request, slug string) {
	var request DeleteArticleFavoriteRequestObject

	request.Slug = slug

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteArticleFavorite(ctx, request.(DeleteArticleFavoriteRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteArticleFavorite")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(DeleteArticleFavoriteResponseObject); ok {
		if err := validResponse.VisitDeleteArticleFavoriteResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateArticleFavorite operation middleware
func (sh *strictHandler) CreateArticleFavorite(w http.ResponseWriter, r *http.Request, slug string) {
	var request CreateArticleFavoriteRequestObject

	request.Slug = slug

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.CreateArticleFavorite(ctx, request.(CreateArticleFavoriteRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateArticleFavorite")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(CreateArticleFavoriteResponseObject); ok {
		if err := validResponse.VisitCreateArticleFavoriteResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetProfileByUsername operation middleware
func (sh *strictHandler) GetProfileByUsername(w http.ResponseWriter, r *http.Request, username string) {
	var request GetProfileByUsernameRequestObject

	request.Username = username

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetProfileByUsername(ctx, request.(GetProfileByUsernameRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetProfileByUsername")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetProfileByUsernameResponseObject); ok {
		if err := validResponse.VisitGetProfileByUsernameResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// UnfollowUserByUsername operation middleware
func (sh *strictHandler) UnfollowUserByUsername(w http.ResponseWriter, r *http.Request, username string) {
	var request UnfollowUserByUsernameRequestObject

	request.Username = username

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.UnfollowUserByUsername(ctx, request.(UnfollowUserByUsernameRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UnfollowUserByUsername")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(UnfollowUserByUsernameResponseObject); ok {
		if err := validResponse.VisitUnfollowUserByUsernameResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// FollowUserByUsername operation middleware
func (sh *strictHandler) FollowUserByUsername(w http.ResponseWriter, r *http.Request, username string) {
	var request FollowUserByUsernameRequestObject

	request.Username = username

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.FollowUserByUsername(ctx, request.(FollowUserByUsernameRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "FollowUserByUsername")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(FollowUserByUsernameResponseObject); ok {
		if err := validResponse.VisitFollowUserByUsernameResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetTags operation middleware
func (sh *strictHandler) GetTags(w http.ResponseWriter, r *http.Request) {
	var request GetTagsRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetTags(ctx, request.(GetTagsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetTags")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetTagsResponseObject); ok {
		if err := validResponse.VisitGetTagsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetCurrentUser operation middleware
func (sh *strictHandler) GetCurrentUser(w http.ResponseWriter, r *http.Request) {
	var request GetCurrentUserRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetCurrentUser(ctx, request.(GetCurrentUserRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetCurrentUser")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetCurrentUserResponseObject); ok {
		if err := validResponse.VisitGetCurrentUserResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// UpdateCurrentUser operation middleware
func (sh *strictHandler) UpdateCurrentUser(w http.ResponseWriter, r *http.Request) {
	var request UpdateCurrentUserRequestObject

	var body UpdateCurrentUserJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateCurrentUser(ctx, request.(UpdateCurrentUserRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateCurrentUser")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(UpdateCurrentUserResponseObject); ok {
		if err := validResponse.VisitUpdateCurrentUserResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateUser operation middleware
func (sh *strictHandler) CreateUser(w http.ResponseWriter, r *http.Request) {
	var request CreateUserRequestObject

	var body CreateUserJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.CreateUser(ctx, request.(CreateUserRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateUser")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(CreateUserResponseObject); ok {
		if err := validResponse.VisitCreateUserResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// Login operation middleware
func (sh *strictHandler) Login(w http.ResponseWriter, r *http.Request) {
	var request LoginRequestObject

	var body LoginJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.Login(ctx, request.(LoginRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "Login")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(LoginResponseObject); ok {
		if err := validResponse.VisitLoginResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xbW3PUOBb+KyrtVs0u5XQHdp7ylglkil2YpSCpeQAe1PZptwZb8khyQk+q//uWbrZs",
	"y93uC5CdgRfStnR0Lt+56Eh+wCkvK86AKYkvHnBFBClBgTC/ClpS9UY/0r8ykKmglaKc4Qt8swLE6nIB",
	"QiK+RFRBKZHiSICqBZvhBFM97PcaxBonmJES8IWliBMs0xWUxFJdkrpQ+OLZeYJLymhZl/jiaYLVutIz",
	"KFOQg8CbTYL5cilhN0MdfuQnWqEFLLkAJBURirJcP095UUCqkFoBEiDrQiEJaoxvu3KH8YbX8wivmwQL",
	"+L0GqX7iGQWjzVc8p+xWgnhr3+hnKWcKmPmTVFVBU6Klmf8mtUgPwWqV4BUI5UjVEoT+/+8ClvgC/23e",
	"WnFu58h5sxz23FABGb54b2d/bLjmi98gVZbprkqvBGTAFCWFUWUtAYeUlKhhk+Bf4P5SKJoWcLxgxBLa",
	"JVu75EA4T2GKfI6GgYMAosbEu+JlCUwdL15qCU0Qzy05EM9TmGQ+OxateY3uCVM75fx64HSLHQ7N56AI",
	"LUzo0R7M4F7DU9gIlFOpQMSEvK0youBrw7Wz6qkQWxui40J+PWO26x1uTz0bZc6ojXQzdKlQAUQq9OQJ",
	"Z/DkCVpSKDJEJfLLzIYqMEzIijNphXhRVmr9309v3bNh7vhF5wOrn02CfwYGgqYvhOBiL9VtU1JI9DXP",
	"oIhqgcHnClIFGQKz+ibBr+tC0arw8JGhFMfB1vxtEuUu5hvoNpYkQpC1/u1pXfHaMhLJ2xG0S9yfOgUl",
	"XheooRIoyIW7UyjIRdnpCmrCdV9B8fAt95O2mbVJ8BvBl1THrqOFrCylXaK5BQei+OlTJGloJPgdZXnR",
	"RuBTYXkygo8IvpZ1j71WmKY8OBXuJqPtiOLACZO2wL0h+Sl8R5G86zeOFakEZflODzHTpwig2dXUbhmp",
	"1YoL+ocm8DCIqMFbPdpkxaOFnJQWj06IZrYjp1e7bLHecwIj42RPTvCCZ+uobWx9mF0ajSy5KInCF1jn",
	"4jNFS11uDKZ0+I6QXJI7Lqiy1nFvF5wXQFj4ejyDJFgWdR6HEslfUVvgTMVbghVVVomDkbbq2EP6fjSx",
	"dnD6DbXZVVOolIEGnLitcJ7jkL8hhBJf7z8yeNAsbtMvqWua7VTWsB4bqM2UYHL43GvnwAhnpkdCQHeU",
	"WzzGeruzH7JcElpEWaqIlPdcZB1tNw93KdvSDajE+Ap25aM62zt6nNTDY5boe6adOyLfqIuNyDfN9M3m",
	"+wsaNDGpx7azHva1djA5xv2btpLsaYXyeErgRcHv9Y9oSqAlyUcC9GQZ9NLhQp7qDlG6W/UTwngckSM8",
	"xPEwptFxnIwrM0TQnpoe8vzFuVX8E7CTgMLD2wPCUt4KDF2DQFoLqtbvdLq04t14lrql2zUXiKQpSGl6",
	"zStAleDKbusv37xEAiSvRQoyMa25spYKrcgdIAEp0DvIEEEE3ZGCZujfv94gwx8iSwWiaW5pylyggue5",
	"/pOyGbpZURmMN2TVChhaAKolZGip+SqKgJuGE7RYIw0HQ0shytAdJYb1Hy5d/WwK4x/QCkgGYvaBfWCX",
	"wWpUolxnVJ1xNTE9Vcu6WCOgatXjXBOfa3XLrhDBi3mhs5xZ52YFqHFkZGOdFW8BetI4m+hCz0cIIWMq",
	"9Nn8m63tv9kf5p8d8IH51r+d2vb+O5TbwEoq+h9Y29KdsiX3uwmSmvTgJr8FUvzKRWFiqCg0eaUqeTGf",
	"39/fzwSQ4l6/na34PY40cFlWU2UUmfG01qnHc1HQFNwexi31+uUNeuWe9hfjFTBr6hkX+dxNlvPXL2+C",
	"6NRyi4KlcYLvQEjL0tPZ+excT9EUSUXxBf7X7Hz21GQLtTJuMQ/7SzmooYf8DAqVXCqDeKaadg7KC74g",
	"RbGeoVsJyBzCoPZMCimOlrSwfiDrQskZ0tbR6OOGNtF+rSOQUdPLzK512facwgOu9wPHtbQ1fEk+chJk",
	"37T7wkHAGSdqK1b0Dx9n/jmyRFPZHrRKs5tAfImI7YrvXDLcjmxdNbaBaHU6D0/oJgwPDhg3H3tN22fn",
	"52M7lmbcfLQ5uknwj+dPdxPo9wd+fPZs96ROg9jkhrosiVg7ZI+B2m7pNPBwg8iPOg9zGfGRK7OfQYR5",
	"Qi3Wm5TWx7qd46uX8AxyPS5VcEw5H57lbQZmmaDVeJPvK9vE5Wvj5y5Tv/+oYdZaa6DjqIkS/Pks5Rnk",
	"wM6cus50IXjm/TXoLTaxb74E2/HYLwAuBS+RzYy6NrBpbzwaGgeaAIwgCF6Ded8LhN/9+lAMxTw+asW4",
	"+3cw8yCLOt9YuBSgIidVz83z/aKCndNGha058F1R5/5UlbSnjY4flz10qm+Th2tXdQ/htuWRgyDRP8R7",
	"fEgY2GYs4I+GhIFZGVdTnPpAo+bmSss3s+h4ljhBEt5thaqOWMHuvffzr27P4DBTNKf5J7PGnpk/ejNi",
	"c1qzPi53HZj6hMnfBvJ5eI486vQaCX6g3aNHwDdhe+PPvw9C4Ip07wnloDpMfcs4MXrA/y2L/BGLBRhq",
	"7LG7xvfURs0/reL33elTACCNsPYNw9PwFt4Rsal/YP94NyYjwIiibFekSoNbA6ORav5As0kF6OGQ7ZSj",
	"p4RsFmHtRJAd9FtePvfspJFbltuqZXM2uXPl9vrUn7xY3gfhUeT61tU20N4yP+oIqF77hU6B1brh6HFW",
	"4I+sVIvZL4CIN822XHt9EAI6+fWkCPhu/+n2v55sfR0h3M1EOX/wbe/N1gKcIDcj6Jg768m1VFBOK8Pd",
	"KfhP61t/jrgDJn6cX8xzsW1nXre0vzA2+hdNv2Wx3VgosLq/dDBq87lru23PC2aMt/pijQIF93b5bqy2",
	"2vE27uUC3yD8K1t8Wh4I7RVFw2j8n2zp6y9k5+9Wnhjtd9pYe7y/ZzzeVyG5nNhGNXeJD1Fm5870iYKd",
	"ssx4qQ1vVmR/63hMZGk3JLUQwFSxNhcrIDujzGtyIPiVHXsr3edS+8rfuU79OM9mnDr6YDIfHBGWGYAA",
	"U+7m967OcGbDB2X2GgrlzGxceovE+sN9VR/Unw0/6tr8CQ3merL72mxX68Nc22tcyF7pjSaJt+6SEiLN",
	"J4UjW4JD7dj7zPKg4/WBEQ+yx6m1am9sjevWXFs23gKfqTTfYUf1a8YdotrBB9b/dx7S+MGLUEOocBo5",
	"lcWMM4o7X8l0r4qRigb30ijXD8wpvlu9uW922X6D1zy7ar9Ua56127PgYfuxQfPIfdDT/B6TcvNx878A",
	"AAD//8OcPBy3QAAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}

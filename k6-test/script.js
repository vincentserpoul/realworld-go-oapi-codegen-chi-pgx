/*
 * RealWorld Conduit API
 * Conduit API documentation
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://github.com/OpenAPITools/openapi-generator
 *
 * OpenAPI generator version: 7.2.0-SNAPSHOT
 */

import http from "k6/http";
import { group, check, sleep } from "k6";
import { crypto } from "k6/experimental/webcrypto";

// const articleTitle = ;
// let createdArticle;

const BASE_URL = "http://localhost:8083";
// Sleep duration between successive requests.
// You might want to edit the value of this variable or remove calls to the sleep function on the script.
const SLEEP_DURATION = 0.1;
// Global variables should be initialized.

export function setup() {
  const realusername = "realuser" + crypto.randomUUID();
  let url = BASE_URL + `/users`;
  // TODO: edit the parameters of the request body.
  let body = {
    user: {
      username: realusername,
      email: realusername + "@gmail.com",
      password: realusername,
    },
  };
  let params = {
    headers: {
      "Content-Type": "application/json",
      Accept: "application/json",
    },
  };
  let request = http.post(url, JSON.stringify(body), params);

  check(request, {
    User: (r) => r.status === 201,
  });

  let loginurl = BASE_URL + `/users/login`;
  let loginbody = {
    user: { email: realusername + "@gmail.com", password: realusername },
  };
  let loginparams = {
    headers: {
      "Content-Type": "application/json",
      Accept: "application/json",
    },
  };
  let loginrequest = http.post(
    loginurl,
    JSON.stringify(loginbody),
    loginparams
  );

  check(loginrequest, {
    User: (r) => r.status === 200,
  });

  const tokenHeader = loginrequest.headers["Authorization"];
  const headers = {
    headers: {
      Authorization: tokenHeader,
    },
  };

  return {
    headers: headers,
    tokenHeader: tokenHeader,
    realusername: realusername,
  };
}

export default function (data) {
  const otheruser = "otheruser" + crypto.randomUUID();

  group("/users", () => {
    // Request No. 1: CreateUser
    {
      let url = BASE_URL + `/users`;
      // TODO: edit the parameters of the request body.
      let body = {
        user: {
          username: otheruser,
          email: otheruser + "@gmail.com",
          password: otheruser,
        },
      };
      let params = {
        headers: {
          "Content-Type": "application/json",
          Accept: "application/json",
        },
      };
      let request = http.post(url, JSON.stringify(body), params);
      check(request, {
        User: (r) => r.status === 201,
      });
    }
    // Request No. 1: Login
    {
      let url = BASE_URL + `/users/login`;
      // TODO: edit the parameters of the request body.
      let body = {
        user: { email: otheruser + "@gmail.com", password: otheruser },
      };
      let params = {
        headers: {
          "Content-Type": "application/json",
          Accept: "application/json",
        },
      };
      let request = http.post(url, JSON.stringify(body), params);
      check(request, {
        User: (r) => r.status === 200,
      });
    }
  });
  group("/profiles/{username}/follow", () => {
    let username = otheruser; // specify value as there is no example value for this parameter in OpenAPI spec
    // Request No. 1: FollowUserByUsername
    {
      let url = BASE_URL + `/profiles/${username}/follow`;
      let request = http.post(url, null, data.headers);
      check(request, {
        Profile: (r) => r.status === 200,
      });
      sleep(SLEEP_DURATION);
    }
    // Request No. 2: UnfollowUserByUsername
    {
      let url = BASE_URL + `/profiles/${username}/follow`;
      let request = http.del(url, null, data.headers);
      check(request, {
        Profile: (r) => r.status === 200,
      });
    }
  });
  const articleTitle = crypto.randomUUID().toString();
  let createdArticle;

  group("/articles", () => {
    // Request No. 2: CreateArticle
    {
      let url = BASE_URL + `/articles`;
      // TODO: edit the parameters of the request body.
      let body = {
        article: {
          title: articleTitle,
          description: "string",
          body: "string",
          tagList: ["tagtest"],
        },
      };
      let params = {
        headers: {
          "Content-Type": "application/json",
          Accept: "application/json",
          Authorization: data.tokenHeader,
        },
      };
      let request = http.post(url, JSON.stringify(body), params);
      check(request, {
        "Single article": (r) => r.status === 201,
      });
      createdArticle = JSON.parse(request.body).article;
    }
    let offset = "0"; // specify value as there is no example value for this parameter in OpenAPI spec
    let author = data.realusername; // specify value as there is no example value for this parameter in OpenAPI spec
    let limit = "10"; // specify value as there is no example value for this parameter in OpenAPI spec
    let tag = "tagtest"; // specify value as there is no example value for this parameter in OpenAPI spec
    let favorited = false; // specify value as there is no example value for this parameter in OpenAPI spec
    // Request No. 1: GetArticles
    {
      let url =
        BASE_URL +
        `/articles?tag=${tag}&author=${author}&favorited=${favorited}&offset=${offset}&limit=${limit}`;
      let request = http.get(url, data.headers);
      check(request, {
        "Multiple articles": (r) => r.status === 200,
      });
      sleep(SLEEP_DURATION);
    }
  });

  group("/articles/{slug}/comments", () => {
    let slug = createdArticle.slug; // specify value as there is no example value for this parameter in OpenAPI spec
    // Request No. 1: GetArticleComments
    {
      let url = BASE_URL + `/articles/${slug}/comments`;
      let request = http.get(url, data.headers);
      check(request, {
        "Multiple comments": (r) => r.status === 200,
      });
      sleep(SLEEP_DURATION);
    }
    // Request No. 2: CreateArticleComment
    {
      let url = BASE_URL + `/articles/${slug}/comments`;
      // TODO: edit the parameters of the request body.
      let body = { comment: { body: "string" } };
      let params = {
        headers: {
          "Content-Type": "application/json",
          Accept: "application/json",
          Authorization: data.tokenHeader,
        },
      };
      let request = http.post(url, JSON.stringify(body), params);
      check(request, {
        "Single comment": (r) => r.status === 200,
      });
    }
  });
  group("/articles/{slug}/favorite", () => {
    let slug = createdArticle.slug; // specify value as there is no example value for this parameter in OpenAPI spec
    // Request No. 1: CreateArticleFavorite
    {
      let url = BASE_URL + `/articles/${slug}/favorite`;
      let request = http.post(url, null, data.headers);
      check(request, {
        "Single article": (r) => r.status === 200,
      });
      sleep(SLEEP_DURATION);
    }
    // Request No. 2: DeleteArticleFavorite
    {
      let url = BASE_URL + `/articles/${slug}/favorite`;
      let request = http.del(url, null, data.headers);
      check(request, {
        "Single article": (r) => r.status === 200,
      });
    }
  });
  group("/articles/{slug}", () => {
    let slug = createdArticle.slug; // specify value as there is no example value for this parameter in OpenAPI spec
    // Request No. 1: GetArticle
    {
      let url = BASE_URL + `/articles/${slug}`;
      let request = http.get(url, data.headers);
      check(request, {
        "Single article": (r) => r.status === 200,
      });
      sleep(SLEEP_DURATION);
    }
    // Request No. 2: DeleteArticle
    {
      let url = BASE_URL + `/articles/${slug}`;
      let request = http.del(url, null, data.headers);
      check(request, {
        "No content": (r) => r.status === 200,
      });
    }
  });
  group("/articles/{slug}/comments/{id}", () => {
    let id = 1; // specify value as there is no example value for this parameter in OpenAPI spec
    let slug = createdArticle.slug; // specify value as there is no example value for this parameter in OpenAPI spec
    // Request No. 1: DeleteArticleComment
    {
      let url = BASE_URL + `/articles/${slug}/comments/${id}`;
      let request = http.del(url, null, data.headers);
      check(request, {
        "No content": (r) => r.status === 200,
      });
    }
  });
  group("/tags", () => {
    // Request No. 1: GetTags
    {
      let url = BASE_URL + `/tags`;
      let request = http.get(url, data.headers);
      check(request, {
        Tags: (r) => r.status === 200,
      });
    }
  });
  let utokenHeader = "";
  let uheaders;
  group("/user", () => {
    let userslash = "userslash" + crypto.randomUUID();
    // Request No. 1: CreateUser
    {
      let url = BASE_URL + `/users`;
      // TODO: edit the parameters of the request body.
      let body = {
        user: {
          username: userslash,
          email: userslash + "@gmail.com",
          password: userslash,
        },
      };
      let params = {
        headers: {
          "Content-Type": "application/json",
          Accept: "application/json",
        },
      };
      let request = http.post(url, JSON.stringify(body), params);
      check(request, {
        User: (r) => r.status === 201,
      });
    }
    // Request No. 1: loginUser
    {
      let loginurl = BASE_URL + `/users/login`;
      let loginbody = {
        user: { email: userslash + "@gmail.com", password: userslash },
      };
      let loginparams = {
        headers: {
          "Content-Type": "application/json",
          Accept: "application/json",
        },
      };
      let loginrequest = http.post(
        loginurl,
        JSON.stringify(loginbody),
        loginparams
      );

      check(loginrequest, {
        User: (r) => r.status === 200,
      });

      utokenHeader = loginrequest.headers["Authorization"];
      uheaders = {
        headers: {
          Authorization: utokenHeader,
        },
      };
    }
    // Request No. 1: GetCurrentUser
    {
      let url = BASE_URL + `/user`;
      let request = http.get(url, uheaders);
      check(request, {
        User: (r) => r.status === 200,
      });
      sleep(SLEEP_DURATION);
    }
    // Request No. 2: UpdateCurrentUser
    {
      let url = BASE_URL + `/user`;
      // TODO: edit the parameters of the request body.
      let body = {
        user: {
          email: userslash + crypto.randomUUID() + "@gmail.com",
          password: "string", // # pragma: allowlist secret
          username: "string" + crypto.randomUUID(),
          bio: "string",
          image: "string",
        },
      };
      let params = {
        headers: {
          "Content-Type": "application/json",
          Accept: "application/json",
          Authorization: utokenHeader,
        },
      };
      let request = http.put(url, JSON.stringify(body), params);
      check(request, {
        User: (r) => r.status === 200,
      });
    }
  });
  group("/articles/feed", () => {
    let offset = "0"; // specify value as there is no example value for this parameter in OpenAPI spec
    let limit = "100"; // specify value as there is no example value for this parameter in OpenAPI spec
    // Request No. 1: GetArticlesFeed
    {
      let url = BASE_URL + `/articles/feed?offset=${offset}&limit=${limit}`;
      let request = http.get(url, data.headers);
      check(request, {
        "Multiple articles": (r) => r.status === 200,
      });
    }
  });
  group("/profiles/{username}", () => {
    let username = otheruser; // specify value as there is no example value for this parameter in OpenAPI spec
    // Request No. 1: GetProfileByUsername
    {
      let url = BASE_URL + `/profiles/${username}`;
      let request = http.get(url, data.headers);
      check(request, {
        Profile: (r) => r.status === 200,
      });
    }
  });
}

name: "check"

on:
  pull_request:
  push:
    branches:
      - "main"

concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

env:
  LINTER_VERSION: "v2.0.2"
  TRIVY_VERSION: "v0.61.0"

jobs:
  check-conv-commits:
    timeout-minutes: 15
    runs-on: [self-hosted, ubuntu, small]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Conventional commit check
        uses: cocogitto/cocogitto-action@v3
  lint:
    name: lint
    runs-on: [ubuntu, large]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Install Go
        uses: actions/setup-go@v5
        with:
          go-version-file: 'go.mod'
      - name: go-lint-goleak
        run: make lint-goleak
      - name: golangci-lint
        uses: golangci/golangci-lint-action@v7
        with:
          version: ${{ env.LINTER_VERSION }}
          args: ./... --config=./.golangci.toml
          only-new-issues: true
  sec-scan:
    timeout-minutes: 15
    runs-on: [self-hosted, ubuntu, small]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Install Go
        uses: actions/setup-go@v5
        with:
          go-version-file: 'go.mod'
      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: "ghcr.io"
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Install trivy
        run: |
          curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b $HOME/.local/bin ${{ env.TRIVY_VERSION }}
      - name: Run security scan with aquasecurity trivy
        run: make sec-trivy-scan
        env:
          TRIVY_DB_REPOSITORY: "ghcr.io/aquasecurity/trivy-db,public.ecr.aws/aquasecurity/trivy-db"
      - name: Install govuln
        run: |
          go install golang.org/x/vuln/cmd/govulncheck@latest
      - name: Run security scan with govuln
        run: |
          make sec-vuln-scan
  tests:
    timeout-minutes: 15
    runs-on: [ubuntu, large]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Install Go
        uses: actions/setup-go@v5
        with:
          go-version-file: 'go.mod'
      - name: Test and send coverage to coveralls
        env:
          COVERALLS_TOKEN: ${{ secrets.COVERALLS_REPO_TOKEN }}
          TIMEOUT_GO_TEST: 5m
        run: |
          make test-coveralls
